[{"C:\\Users\\nharada\\marketing-app\\src\\index.js":"1","C:\\Users\\nharada\\marketing-app\\src\\App.js":"2","C:\\Users\\nharada\\marketing-app\\src\\LoginForm.js":"3","C:\\Users\\nharada\\marketing-app\\src\\RegisterForm.js":"4","C:\\Users\\nharada\\marketing-app\\src\\utils\\apiRequest.js":"5","C:\\Users\\nharada\\marketing-app\\src\\components\\Page1.js":"6","C:\\Users\\nharada\\marketing-app\\src\\components\\ChatBubble.js":"7","C:\\Users\\nharada\\marketing-app\\src\\components\\QuizQuestion.js":"8","C:\\Users\\nharada\\marketing-app\\src\\ProgressTracker.js":"9","C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_2.js":"10","C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_1.js":"11","C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_3.js":"12","C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_5.js":"13","C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_6.js":"14","C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_7.js":"15","C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_4.js":"16","C:\\Users\\nharada\\marketing-app\\src\\data\\chapter2\\chapter2_1.js":"17","C:\\Users\\nharada\\marketing-app\\src\\data\\chapter2\\chapter2_2.js":"18","C:\\Users\\nharada\\marketing-app\\src\\components\\Page2.js":"19"},{"size":230,"mtime":1720141044095,"results":"20","hashOfConfig":"21"},{"size":6167,"mtime":1723005673631,"results":"22","hashOfConfig":"21"},{"size":1943,"mtime":1722239295027,"results":"23","hashOfConfig":"21"},{"size":1968,"mtime":1722239289002,"results":"24","hashOfConfig":"21"},{"size":1834,"mtime":1722414684541,"results":"25","hashOfConfig":"21"},{"size":11546,"mtime":1723008695608,"results":"26","hashOfConfig":"21"},{"size":495,"mtime":1722413091533,"results":"27","hashOfConfig":"21"},{"size":1563,"mtime":1722487954492,"results":"28","hashOfConfig":"21"},{"size":3811,"mtime":1723002778011,"results":"29","hashOfConfig":"21"},{"size":10719,"mtime":1723004391934,"results":"30","hashOfConfig":"21"},{"size":10719,"mtime":1723004348803,"results":"31","hashOfConfig":"21"},{"size":10719,"mtime":1723004409319,"results":"32","hashOfConfig":"21"},{"size":10719,"mtime":1723004431112,"results":"33","hashOfConfig":"21"},{"size":10719,"mtime":1723004437348,"results":"34","hashOfConfig":"21"},{"size":10719,"mtime":1723004443647,"results":"35","hashOfConfig":"21"},{"size":10719,"mtime":1723004420445,"results":"36","hashOfConfig":"21"},{"size":10663,"mtime":1723005255179,"results":"37","hashOfConfig":"21"},{"size":10663,"mtime":1723005301630,"results":"38","hashOfConfig":"21"},{"size":11546,"mtime":1723008762426,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"p12g13",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"C:\\Users\\nharada\\marketing-app\\src\\index.js",[],["81","82"],"C:\\Users\\nharada\\marketing-app\\src\\App.js",[],"C:\\Users\\nharada\\marketing-app\\src\\LoginForm.js",[],"C:\\Users\\nharada\\marketing-app\\src\\RegisterForm.js",[],"C:\\Users\\nharada\\marketing-app\\src\\utils\\apiRequest.js",[],"C:\\Users\\nharada\\marketing-app\\src\\components\\Page1.js",["83","84","85"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nimport apiRequest from '../utils/apiRequest';\r\nimport '../App.css';\r\nimport ChatBubble from '../components/ChatBubble';\r\nimport QuizQuestion from '../components/QuizQuestion';\r\nimport { BookOpen } from 'lucide-react';\r\n\r\n// フックの前にチャプターデータをロード\r\nconst chapterData = Array.from({ length: 7 }, (_, i) => require(`../data/chapter1/chapter1_${i + 1}.js`));\r\n\r\nfunction Page1() {\r\n  const { chapterId } = useParams();\r\n  const chapterIndex = parseInt(chapterId, 10) - 1;\r\n  const navigate = useNavigate();\r\n\r\n  const [visibleStep, setVisibleStep] = useState(0);\r\n  const [quizStarted, setQuizStarted] = useState(false);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showFeedback, setShowFeedback] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const chatContainerRef = useRef(null);\r\n  const [studyTime, setStudyTime] = useState(0);\r\n  const [startTime, setStartTime] = useState(Date.now());\r\n  const [inactiveStartTime, setInactiveStartTime] = useState(null);\r\n  const [allImagesLoaded, setAllImagesLoaded] = useState(false);\r\n  const inactivityTimer = useRef(null);\r\n\r\n  // チャプターデータの有効性チェック\r\n  const isValidChapter = chapterIndex >= 0 && chapterIndex < chapterData.length;\r\n  const chapter = isValidChapter ? chapterData[chapterIndex] : null;\r\n\r\n  const saveStudyTime = async (time) => {\r\n    try {\r\n      await apiRequest('/api/progress/update', {\r\n        method: 'POST',\r\n        data: {\r\n          chapterId: `${chapterId}`,\r\n          studyTime: time\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving study time', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true; // アンマウントを追跡するフラグ\r\n\r\n    if (!isValidChapter) {\r\n      // 無効なチャプターIDの場合、ホームページにリダイレクト\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    const resetInactivityTimer = () => {\r\n      if (inactivityTimer.current) {\r\n        clearTimeout(inactivityTimer.current);\r\n      }\r\n      inactivityTimer.current = setTimeout(() => {\r\n        handleInactivity();\r\n      }, 180000); // 3分（180秒）\r\n    };\r\n\r\n    const handleInactivity = () => {\r\n      setInactiveStartTime(Date.now()); // 非アクティブの開始時間を記録\r\n    };\r\n\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'hidden' || document.hidden) {\r\n        handleInactivity();\r\n      } else {\r\n        if (inactiveStartTime) {\r\n          const inactiveEndTime = Date.now();\r\n          const inactiveDuration = Math.floor((inactiveEndTime - inactiveStartTime) / 1000); // 非アクティブ時間\r\n          setInactiveStartTime(null); // 非アクティブ時間をリセット\r\n          setStartTime(prevTime => prevTime + inactiveDuration * 1000); // startTimeを非アクティブ時間だけ進める\r\n        }\r\n        setStartTime(Date.now());\r\n        resetInactivityTimer();\r\n      }\r\n    };\r\n\r\n    const handleWindowFocus = () => {\r\n      if (inactiveStartTime) {\r\n        const inactiveEndTime = Date.now();\r\n        const inactiveDuration = Math.floor((inactiveEndTime - inactiveStartTime) / 1000); // 非アクティブ時間\r\n        setInactiveStartTime(null); // 非アクティブ時間をリセット\r\n        setStartTime(prevTime => prevTime + inactiveDuration * 1000); // startTimeを非アクティブ時間だけ進める\r\n      }\r\n      setStartTime(Date.now());\r\n      resetInactivityTimer();\r\n    };\r\n\r\n    const handleWindowBlur = () => {\r\n      handleInactivity();\r\n    };\r\n\r\n    const handleUserActivity = () => {\r\n      if (inactiveStartTime) {\r\n        const inactiveEndTime = Date.now();\r\n        const inactiveDuration = Math.floor((inactiveEndTime - inactiveStartTime) / 1000); // 非アクティブ時間\r\n        setInactiveStartTime(null); // 非アクティブ時間をリセット\r\n        setStartTime(prevTime => prevTime + inactiveDuration * 1000); // startTimeを非アクティブ時間だけ進める\r\n      }\r\n      resetInactivityTimer();\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    window.addEventListener('focus', handleWindowFocus);\r\n    window.addEventListener('blur', handleWindowBlur);\r\n    window.addEventListener('mousemove', handleUserActivity);\r\n    window.addEventListener('keydown', handleUserActivity);\r\n    window.addEventListener('touchstart', handleUserActivity); // スマホ対応\r\n    window.addEventListener('touchmove', handleUserActivity); // スマホ対応\r\n\r\n    return () => {\r\n      isMounted = false; // コンポーネントがアンマウントされたことを示す\r\n\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n      window.removeEventListener('focus', handleWindowFocus);\r\n      window.removeEventListener('blur', handleWindowBlur);\r\n      window.removeEventListener('mousemove', handleUserActivity);\r\n      window.removeEventListener('keydown', handleUserActivity);\r\n      window.removeEventListener('touchstart', handleUserActivity); // スマホ対応\r\n      window.removeEventListener('touchmove', handleUserActivity); // スマホ対応\r\n\r\n      if (inactivityTimer.current) {\r\n        clearTimeout(inactivityTimer.current);\r\n      }\r\n\r\n      const endTime = Date.now();\r\n      const elapsed = Math.floor((endTime - startTime) / 1000);\r\n      saveStudyTime(studyTime + elapsed); // isMountedチェックを外して保存\r\n    };\r\n\r\n  }, [isValidChapter, navigate, startTime, studyTime, chapterId, inactiveStartTime]);\r\n\r\n  // コンテンツが追加されるたびに最下部にスクロール\r\n  useEffect(() => {\r\n    if (chatContainerRef.current) {\r\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\r\n    }\r\n  }, [visibleStep, quizStarted, currentQuestionIndex, showFeedback, showResults, allImagesLoaded]);\r\n\r\n  // 画像の読み込み完了を監視\r\n  useEffect(() => {\r\n    const images = chatContainerRef.current?.getElementsByTagName('img');\r\n    if (images) {\r\n      let loadedCount = 0;\r\n      const totalImages = images.length;\r\n\r\n      const handleImageLoad = () => {\r\n        loadedCount += 1;\r\n        if (loadedCount === totalImages) {\r\n          setAllImagesLoaded(true);\r\n        }\r\n      };\r\n\r\n      if (totalImages === 0) {\r\n        setAllImagesLoaded(true);\r\n      } else {\r\n        for (const img of images) {\r\n          if (img.complete) {\r\n            handleImageLoad();\r\n          } else {\r\n            img.addEventListener('load', handleImageLoad);\r\n            img.addEventListener('error', handleImageLoad);\r\n          }\r\n        }\r\n      }\r\n\r\n      return () => {\r\n        for (const img of images) {\r\n          img.removeEventListener('load', handleImageLoad);\r\n          img.removeEventListener('error', handleImageLoad);\r\n        }\r\n      };\r\n    }\r\n  }, [visibleStep, quizStarted, currentQuestionIndex]);\r\n\r\n  const completeChapter = async () => {\r\n    try {\r\n      const endTime = Date.now();\r\n      const elapsed = Math.floor((endTime - startTime) / 1000);\r\n      const totalStudyTime = studyTime + elapsed;\r\n      await saveStudyTime(totalStudyTime);\r\n\r\n      await apiRequest('/api/progress/update', {\r\n          method: 'POST',\r\n          data: {\r\n              chapterId: `${chapterId}`,\r\n              completed: true,\r\n              studyTime: totalStudyTime\r\n          }\r\n      });\r\n\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.error('Error completing chapter', error);\r\n    }\r\n  };\r\n\r\n  const showNextStep = () => {\r\n    if (visibleStep < chapter.content.length - 1) {\r\n      setVisibleStep(visibleStep + 1);\r\n      setAllImagesLoaded(false); // 新しいステップが追加されるたびにリセット\r\n    } else {\r\n      setQuizStarted(true);\r\n    }\r\n  };\r\n\r\n  const handleQuizAnswer = (selectedAnswer) => {\r\n    const currentQuestion = chapter.quizQuestions[currentQuestionIndex];\r\n    const correct = selectedAnswer === currentQuestion.correctAnswer;\r\n    setIsCorrect(correct);\r\n    setShowFeedback(true);\r\n    if (correct) {\r\n      setScore(score + 1);\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setShowFeedback(false);\r\n    if (currentQuestionIndex < chapter.quizQuestions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      setShowResults(true); // クイズ終了後の結果表示状態に変更\r\n    }\r\n  };\r\n\r\n  if (!isValidChapter) {\r\n    return null; // または適切なローディング表示\r\n  }\r\n\r\n  const { title, chapterOverview, content, quizQuestions } = chapter;\r\n  const progressPercentage = ((visibleStep + 1) / content.length) * 100;\r\n\r\n  // chapterIdの末尾の数値に1を加えるロジック\r\n  const getNextChapterId = (currentId) => {\r\n    const parts = currentId.split('_');\r\n    const prefix = parts[0];\r\n    const suffix = parseInt(parts[1], 10) + 1;\r\n    return `${prefix}_${suffix}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"Content\">\r\n      <div className=\"chapter-header\">\r\n        <div className=\"title-container\">\r\n          <BookOpen className=\"book-icon\" size={50} />\r\n          <h1 className=\"main-title\">{title}</h1>\r\n        </div>\r\n      \r\n        {visibleStep === 0 && (\r\n          <div className=\"overview-container\">\r\n            <h2 className=\"overview-title\">チャプター概要</h2>\r\n            <p className=\"overview-text\">{chapterOverview}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"progress-bar-container\">\r\n        <div className=\"progress-bar\" style={{ width: `${progressPercentage}%` }}></div>\r\n      </div>\r\n      \r\n      <div className=\"chat-container\" ref={chatContainerRef}>\r\n        {content.slice(0, visibleStep + 1).map((item, index) => (\r\n          <div key={index}>\r\n            {item.type === \"sectionTitle\" ? (\r\n              <h3 className=\"section-title\">{item.text}</h3>\r\n            ) : (\r\n              <ChatBubble sender={item.sender} type={item.type} text={item.text} src={item.src} alt={item.alt} />\r\n            )}\r\n          </div>\r\n        ))}\r\n\r\n        {quizStarted && (\r\n          <QuizQuestion\r\n            question={quizQuestions[currentQuestionIndex]?.question}\r\n            options={quizQuestions[currentQuestionIndex]?.options}\r\n            handleAnswer={handleQuizAnswer}\r\n            showFeedback={showFeedback}\r\n            isCorrect={isCorrect}\r\n            explanation={quizQuestions[currentQuestionIndex]?.explanation}\r\n            nextQuestion={nextQuestion}\r\n            currentQuestionIndex={currentQuestionIndex}\r\n            totalQuestions={quizQuestions.length}\r\n            score={score}\r\n            completeChapter={completeChapter}\r\n            showResults={showResults}\r\n            setShowResults={setShowResults}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      {!quizStarted && (\r\n        <button onClick={showNextStep} className=\"next-button\">\r\n          {visibleStep < content.length - 1 ? \"次へ\" : \"確認テストを始める\"}\r\n        </button>\r\n      )}\r\n      \r\n      <div className=\"links-container\">\r\n        <Link to={`/marketing-app/Page1/${getNextChapterId(chapterId)}`}>次の章へ</Link>\r\n        <Link to=\"/\">ホームに戻る</Link>  \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page1;\r\n","C:\\Users\\nharada\\marketing-app\\src\\components\\ChatBubble.js",[],"C:\\Users\\nharada\\marketing-app\\src\\components\\QuizQuestion.js",[],"C:\\Users\\nharada\\marketing-app\\src\\ProgressTracker.js",[],"C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_2.js",[],"C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_1.js",[],"C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_3.js",[],"C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_5.js",[],"C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_6.js",[],"C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_7.js",[],"C:\\Users\\nharada\\marketing-app\\src\\data\\chapter1\\chapter1_4.js",[],"C:\\Users\\nharada\\marketing-app\\src\\data\\chapter2\\chapter2_1.js",[],"C:\\Users\\nharada\\marketing-app\\src\\data\\chapter2\\chapter2_2.js",[],"C:\\Users\\nharada\\marketing-app\\src\\components\\Page2.js",["86","87","88"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nimport apiRequest from '../utils/apiRequest';\r\nimport '../App.css';\r\nimport ChatBubble from '../components/ChatBubble';\r\nimport QuizQuestion from '../components/QuizQuestion';\r\nimport { BookOpen } from 'lucide-react';\r\n\r\n// フックの前にチャプターデータをロード\r\nconst chapterData = Array.from({ length: 2 }, (_, i) => require(`../data/chapter2/chapter2_${i + 1}.js`));\r\n\r\nfunction Page2() {\r\n  const { chapterId } = useParams();\r\n  const chapterIndex = parseInt(chapterId, 10) - 1;\r\n  const navigate = useNavigate();\r\n\r\n  const [visibleStep, setVisibleStep] = useState(0);\r\n  const [quizStarted, setQuizStarted] = useState(false);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showFeedback, setShowFeedback] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const chatContainerRef = useRef(null);\r\n  const [studyTime, setStudyTime] = useState(0);\r\n  const [startTime, setStartTime] = useState(Date.now());\r\n  const [inactiveStartTime, setInactiveStartTime] = useState(null);\r\n  const [allImagesLoaded, setAllImagesLoaded] = useState(false);\r\n  const inactivityTimer = useRef(null);\r\n\r\n  // チャプターデータの有効性チェック\r\n  const isValidChapter = chapterIndex >= 0 && chapterIndex < chapterData.length;\r\n  const chapter = isValidChapter ? chapterData[chapterIndex] : null;\r\n\r\n  const saveStudyTime = async (time) => {\r\n    try {\r\n      await apiRequest('/api/progress/update', {\r\n        method: 'POST',\r\n        data: {\r\n          chapterId: `${chapterId}`,\r\n          studyTime: time\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving study time', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true; // アンマウントを追跡するフラグ\r\n\r\n    if (!isValidChapter) {\r\n      // 無効なチャプターIDの場合、ホームページにリダイレクト\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    const resetInactivityTimer = () => {\r\n      if (inactivityTimer.current) {\r\n        clearTimeout(inactivityTimer.current);\r\n      }\r\n      inactivityTimer.current = setTimeout(() => {\r\n        handleInactivity();\r\n      }, 180000); // 3分（180秒）\r\n    };\r\n\r\n    const handleInactivity = () => {\r\n      setInactiveStartTime(Date.now()); // 非アクティブの開始時間を記録\r\n    };\r\n\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'hidden' || document.hidden) {\r\n        handleInactivity();\r\n      } else {\r\n        if (inactiveStartTime) {\r\n          const inactiveEndTime = Date.now();\r\n          const inactiveDuration = Math.floor((inactiveEndTime - inactiveStartTime) / 1000); // 非アクティブ時間\r\n          setInactiveStartTime(null); // 非アクティブ時間をリセット\r\n          setStartTime(prevTime => prevTime + inactiveDuration * 1000); // startTimeを非アクティブ時間だけ進める\r\n        }\r\n        setStartTime(Date.now());\r\n        resetInactivityTimer();\r\n      }\r\n    };\r\n\r\n    const handleWindowFocus = () => {\r\n      if (inactiveStartTime) {\r\n        const inactiveEndTime = Date.now();\r\n        const inactiveDuration = Math.floor((inactiveEndTime - inactiveStartTime) / 1000); // 非アクティブ時間\r\n        setInactiveStartTime(null); // 非アクティブ時間をリセット\r\n        setStartTime(prevTime => prevTime + inactiveDuration * 1000); // startTimeを非アクティブ時間だけ進める\r\n      }\r\n      setStartTime(Date.now());\r\n      resetInactivityTimer();\r\n    };\r\n\r\n    const handleWindowBlur = () => {\r\n      handleInactivity();\r\n    };\r\n\r\n    const handleUserActivity = () => {\r\n      if (inactiveStartTime) {\r\n        const inactiveEndTime = Date.now();\r\n        const inactiveDuration = Math.floor((inactiveEndTime - inactiveStartTime) / 1000); // 非アクティブ時間\r\n        setInactiveStartTime(null); // 非アクティブ時間をリセット\r\n        setStartTime(prevTime => prevTime + inactiveDuration * 1000); // startTimeを非アクティブ時間だけ進める\r\n      }\r\n      resetInactivityTimer();\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    window.addEventListener('focus', handleWindowFocus);\r\n    window.addEventListener('blur', handleWindowBlur);\r\n    window.addEventListener('mousemove', handleUserActivity);\r\n    window.addEventListener('keydown', handleUserActivity);\r\n    window.addEventListener('touchstart', handleUserActivity); // スマホ対応\r\n    window.addEventListener('touchmove', handleUserActivity); // スマホ対応\r\n\r\n    return () => {\r\n      isMounted = false; // コンポーネントがアンマウントされたことを示す\r\n\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n      window.removeEventListener('focus', handleWindowFocus);\r\n      window.removeEventListener('blur', handleWindowBlur);\r\n      window.removeEventListener('mousemove', handleUserActivity);\r\n      window.removeEventListener('keydown', handleUserActivity);\r\n      window.removeEventListener('touchstart', handleUserActivity); // スマホ対応\r\n      window.removeEventListener('touchmove', handleUserActivity); // スマホ対応\r\n\r\n      if (inactivityTimer.current) {\r\n        clearTimeout(inactivityTimer.current);\r\n      }\r\n\r\n      const endTime = Date.now();\r\n      const elapsed = Math.floor((endTime - startTime) / 1000);\r\n      saveStudyTime(studyTime + elapsed); // isMountedチェックを外して保存\r\n    };\r\n\r\n  }, [isValidChapter, navigate, startTime, studyTime, chapterId, inactiveStartTime]);\r\n\r\n  // コンテンツが追加されるたびに最下部にスクロール\r\n  useEffect(() => {\r\n    if (chatContainerRef.current) {\r\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\r\n    }\r\n  }, [visibleStep, quizStarted, currentQuestionIndex, showFeedback, showResults, allImagesLoaded]);\r\n\r\n  // 画像の読み込み完了を監視\r\n  useEffect(() => {\r\n    const images = chatContainerRef.current?.getElementsByTagName('img');\r\n    if (images) {\r\n      let loadedCount = 0;\r\n      const totalImages = images.length;\r\n\r\n      const handleImageLoad = () => {\r\n        loadedCount += 1;\r\n        if (loadedCount === totalImages) {\r\n          setAllImagesLoaded(true);\r\n        }\r\n      };\r\n\r\n      if (totalImages === 0) {\r\n        setAllImagesLoaded(true);\r\n      } else {\r\n        for (const img of images) {\r\n          if (img.complete) {\r\n            handleImageLoad();\r\n          } else {\r\n            img.addEventListener('load', handleImageLoad);\r\n            img.addEventListener('error', handleImageLoad);\r\n          }\r\n        }\r\n      }\r\n\r\n      return () => {\r\n        for (const img of images) {\r\n          img.removeEventListener('load', handleImageLoad);\r\n          img.removeEventListener('error', handleImageLoad);\r\n        }\r\n      };\r\n    }\r\n  }, [visibleStep, quizStarted, currentQuestionIndex]);\r\n\r\n  const completeChapter = async () => {\r\n    try {\r\n      const endTime = Date.now();\r\n      const elapsed = Math.floor((endTime - startTime) / 1000);\r\n      const totalStudyTime = studyTime + elapsed;\r\n      await saveStudyTime(totalStudyTime);\r\n\r\n      await apiRequest('/api/progress/update', {\r\n          method: 'POST',\r\n          data: {\r\n              chapterId: `${chapterId}`,\r\n              completed: true,\r\n              studyTime: totalStudyTime\r\n          }\r\n      });\r\n\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.error('Error completing chapter', error);\r\n    }\r\n  };\r\n\r\n  const showNextStep = () => {\r\n    if (visibleStep < chapter.content.length - 1) {\r\n      setVisibleStep(visibleStep + 1);\r\n      setAllImagesLoaded(false); // 新しいステップが追加されるたびにリセット\r\n    } else {\r\n      setQuizStarted(true);\r\n    }\r\n  };\r\n\r\n  const handleQuizAnswer = (selectedAnswer) => {\r\n    const currentQuestion = chapter.quizQuestions[currentQuestionIndex];\r\n    const correct = selectedAnswer === currentQuestion.correctAnswer;\r\n    setIsCorrect(correct);\r\n    setShowFeedback(true);\r\n    if (correct) {\r\n      setScore(score + 1);\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setShowFeedback(false);\r\n    if (currentQuestionIndex < chapter.quizQuestions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      setShowResults(true); // クイズ終了後の結果表示状態に変更\r\n    }\r\n  };\r\n\r\n  if (!isValidChapter) {\r\n    return null; // または適切なローディング表示\r\n  }\r\n\r\n  const { title, chapterOverview, content, quizQuestions } = chapter;\r\n  const progressPercentage = ((visibleStep + 1) / content.length) * 100;\r\n\r\n  // chapterIdの末尾の数値に1を加えるロジック\r\n  const getNextChapterId = (currentId) => {\r\n    const parts = currentId.split('_');\r\n    const prefix = parts[0];\r\n    const suffix = parseInt(parts[1], 10) + 1;\r\n    return `${prefix}_${suffix}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"Content\">\r\n      <div className=\"chapter-header\">\r\n        <div className=\"title-container\">\r\n          <BookOpen className=\"book-icon\" size={50} />\r\n          <h1 className=\"main-title\">{title}</h1>\r\n        </div>\r\n      \r\n        {visibleStep === 0 && (\r\n          <div className=\"overview-container\">\r\n            <h2 className=\"overview-title\">チャプター概要</h2>\r\n            <p className=\"overview-text\">{chapterOverview}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"progress-bar-container\">\r\n        <div className=\"progress-bar\" style={{ width: `${progressPercentage}%` }}></div>\r\n      </div>\r\n      \r\n      <div className=\"chat-container\" ref={chatContainerRef}>\r\n        {content.slice(0, visibleStep + 1).map((item, index) => (\r\n          <div key={index}>\r\n            {item.type === \"sectionTitle\" ? (\r\n              <h3 className=\"section-title\">{item.text}</h3>\r\n            ) : (\r\n              <ChatBubble sender={item.sender} type={item.type} text={item.text} src={item.src} alt={item.alt} />\r\n            )}\r\n          </div>\r\n        ))}\r\n\r\n        {quizStarted && (\r\n          <QuizQuestion\r\n            question={quizQuestions[currentQuestionIndex]?.question}\r\n            options={quizQuestions[currentQuestionIndex]?.options}\r\n            handleAnswer={handleQuizAnswer}\r\n            showFeedback={showFeedback}\r\n            isCorrect={isCorrect}\r\n            explanation={quizQuestions[currentQuestionIndex]?.explanation}\r\n            nextQuestion={nextQuestion}\r\n            currentQuestionIndex={currentQuestionIndex}\r\n            totalQuestions={quizQuestions.length}\r\n            score={score}\r\n            completeChapter={completeChapter}\r\n            showResults={showResults}\r\n            setShowResults={setShowResults}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      {!quizStarted && (\r\n        <button onClick={showNextStep} className=\"next-button\">\r\n          {visibleStep < content.length - 1 ? \"次へ\" : \"確認テストを始める\"}\r\n        </button>\r\n      )}\r\n      \r\n      <div className=\"links-container\">\r\n        <Link to={`/marketing-app/Page2/${getNextChapterId(chapterId)}`}>次の章へ</Link>\r\n        <Link to=\"/\">ホームに戻る</Link>  \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page2;\r\n",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":25,"column":21,"nodeType":"95","messageId":"96","endLine":25,"endColumn":33},{"ruleId":"93","severity":1,"message":"97","line":50,"column":9,"nodeType":"95","messageId":"96","endLine":50,"endColumn":18},{"ruleId":"98","severity":1,"message":"99","line":139,"column":6,"nodeType":"100","endLine":139,"endColumn":84,"suggestions":"101"},{"ruleId":"93","severity":1,"message":"94","line":25,"column":21,"nodeType":"95","messageId":"96","endLine":25,"endColumn":33},{"ruleId":"93","severity":1,"message":"97","line":50,"column":9,"nodeType":"95","messageId":"96","endLine":50,"endColumn":18},{"ruleId":"98","severity":1,"message":"99","line":139,"column":6,"nodeType":"100","endLine":139,"endColumn":84,"suggestions":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'setStudyTime' is assigned a value but never used.","Identifier","unusedVar","'isMounted' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'saveStudyTime'. Either include it or remove the dependency array.","ArrayExpression",["105"],["106"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"desc":"107","fix":"109"},"Update the dependencies array to be: [isValidChapter, navigate, startTime, studyTime, chapterId, inactiveStartTime, saveStudyTime]",{"range":"110","text":"111"},{"range":"112","text":"111"},[5269,5347],"[isValidChapter, navigate, startTime, studyTime, chapterId, inactiveStartTime, saveStudyTime]",[5269,5347]]