{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\nconst refreshAccessToken = async refreshToken => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/api/auth/token`, {\n      token: refreshToken\n    });\n    localStorage.setItem('token', response.data.accessToken);\n    return response.data.accessToken;\n  } catch (error) {\n    console.error('Error refreshing access token', error);\n    return null;\n  }\n};\nconst apiRequest = async (url, options = {}) => {\n  const refreshToken = localStorage.getItem('refreshToken');\n\n  // トークンが必要な場合にのみチェック\n  if (!options.noAuth) {\n    let token = localStorage.getItem('token');\n    if (!token) {\n      alert('No token found. Redirecting to login.');\n      window.location.href = '/marketing-app/login';\n      return;\n    }\n    try {\n      const response = await axios({\n        url: `${API_BASE_URL}${url}`,\n        method: options.method || 'GET',\n        data: options.data || {},\n        headers: {\n          Authorization: `Bearer ${token}`,\n          ...options.headers\n        },\n        ...options\n      });\n      return response;\n    } catch (error) {\n      alert('Initial request error: ' + error.message); // デバッグ用アラート\n\n      if (error.response && error.response.status === 403) {\n        token = await refreshAccessToken(refreshToken);\n        if (token) {\n          try {\n            const response = await axios({\n              url: `${API_BASE_URL}${url}`,\n              method: options.method || 'GET',\n              data: options.data || {},\n              headers: {\n                Authorization: `Bearer ${token}`,\n                ...options.headers\n              },\n              ...options\n            });\n            return response;\n          } catch (retryError) {\n            alert('Retry request error: ' + retryError.message); // デバッグ用アラート\n            throw retryError;\n          }\n        } else {\n          alert('No refresh token found. Redirecting to login.');\n          window.location.href = '/marketing-app/login';\n        }\n      } else {\n        throw error;\n      }\n    }\n  } else {\n    // トークンが不要なリクエスト（例：ログインリクエスト）\n    try {\n      const response = await axios({\n        url: `${API_BASE_URL}${url}`,\n        method: options.method || 'GET',\n        data: options.data || {},\n        ...options\n      });\n      return response;\n    } catch (error) {\n      alert('Request error: ' + error.message);\n      throw error;\n    }\n  }\n};\nexport default apiRequest;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","refreshAccessToken","refreshToken","response","post","token","localStorage","setItem","data","accessToken","error","console","apiRequest","url","options","getItem","noAuth","alert","window","location","href","method","headers","Authorization","message","status","retryError"],"sources":["C:/Users/nharada/marketing-app/src/utils/apiRequest.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\nconst refreshAccessToken = async (refreshToken) => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/api/auth/token`, { token: refreshToken });\r\n    localStorage.setItem('token', response.data.accessToken);\r\n    return response.data.accessToken;\r\n  } catch (error) {\r\n    console.error('Error refreshing access token', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst apiRequest = async (url, options = {}) => {\r\n  const refreshToken = localStorage.getItem('refreshToken');\r\n  \r\n  // トークンが必要な場合にのみチェック\r\n  if (!options.noAuth) {\r\n    let token = localStorage.getItem('token');\r\n\r\n    if (!token) {\r\n      alert('No token found. Redirecting to login.');\r\n      window.location.href = '/marketing-app/login';\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios({\r\n        url: `${API_BASE_URL}${url}`,\r\n        method: options.method || 'GET',\r\n        data: options.data || {},\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          ...options.headers,\r\n        },\r\n        ...options,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      alert('Initial request error: ' + error.message); // デバッグ用アラート\r\n\r\n      if (error.response && error.response.status === 403) {\r\n        token = await refreshAccessToken(refreshToken);\r\n        if (token) {\r\n          try {\r\n            const response = await axios({\r\n              url: `${API_BASE_URL}${url}`,\r\n              method: options.method || 'GET',\r\n              data: options.data || {},\r\n              headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                ...options.headers,\r\n              },\r\n              ...options,\r\n            });\r\n            return response;\r\n          } catch (retryError) {\r\n            alert('Retry request error: ' + retryError.message); // デバッグ用アラート\r\n            throw retryError;\r\n          }\r\n        } else {\r\n          alert('No refresh token found. Redirecting to login.');\r\n          window.location.href = '/marketing-app/login';\r\n        }\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  } else {\r\n    // トークンが不要なリクエスト（例：ログインリクエスト）\r\n    try {\r\n      const response = await axios({\r\n        url: `${API_BASE_URL}${url}`,\r\n        method: options.method || 'GET',\r\n        data: options.data || {},\r\n        ...options,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      alert('Request error: ' + error.message);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default apiRequest;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}